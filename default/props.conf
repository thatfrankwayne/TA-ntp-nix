### TA-ntp-* props.conf
### DO NOT MODIFY THIS FILE. Modify the relevant stanzas in ./local/props.conf.

### clockstats ###

[ntp:clockstats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_clock_gps = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<src_ip>\S+)\s\$G[NP]GGA,(?<gps_utc>[^,]+),(?<gps_latitude>[^,]+),(?<gps_latitude_direction>[NS]),(?<gps_longitude>[^,]+),(?<gps_longitude_direction>[EW]),(?<gps_fix_quality>[^,]+),(?<gps_tracked_satellites>[^,]+),(?<gps_horizontal_dilution>[^,]+),(?<gps_altitude_m>[^,]+),M,(?<gps_wgs84_m>[^,]*),M,(?<gps_last_dgps_update_s>[^,]*),(?<gps_dgps_station_id>[^,]*)\*(?<gps_checksum>..)$
EXTRACT-ntp_clock_z = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<src_ip>\S+)\s(?<dest_ip>\S+)\s(?<ph_org>\S+)\s(?<ph_rec>\S+)\s(?<ph_xmt>\S+)\s(?<pbds_dst>\S+)\s(?<leap_warning>\S+)\s(?<version>\S+)\s(?<mode>\S+)\s(?<stratum>\S+)\s(?<poll_exponent>\S+)\s(?<precision_exponent>\S+)\s(?<root_delay_s>\S+)\s(?<root_dispersion_s>\S+)\s(?<ref_id>\S+)$
EVAL-gps_latitude = case(isnotnull(gps_latitude), floor(gps_latitude / 100) + (gps_latitude - floor(gps_latitude / 100) * 100) / 60)
EVAL-gps_longitude = case(isnotnull(gps_longitude), floor(gps_longitude / 100) + (gps_longitude - floor(gps_longitude / 100) * 100) / 60)
EVAL-gps_fix_quality_text = case( \
  gps_fix_quality = 0, "invalid", \
  gps_fix_quality = 1, "GPS fix", \
  gps_fix_quality = 2, "DGPS fix", \
  gps_fix_quality = 3, "PPS fix", \
  gps_fix_quality = 4, "Real Time Kinematic", \
  gps_fix_quality = 5, "Float RTK", \
  gps_fix_quality = 6, "estimated", \
  gps_fix_quality = 7, "manual input mode", \
  gps_fix_quality = 8, "simulation mode" \
)
EVAL-time_origin = if(ph_org == 0, null(), ph_org - 2208988800 - floor((ph_org) / pow(2, 32)) * pow(2, 32))
EVAL-time_receive = if(ph_rec == 0, null(), ph_rec - 2208988800 - floor((ph_rec) / pow(2, 32)) * pow(2, 32))
EVAL-time_transmit = ph_xmt - 2208988800 - floor((ph_xmt) / pow(2, 32)) * pow(2, 32)
EVAL-time_destination = if(pbds_dst == 0, null(), pbds_dst - 2208988800 - floor((pbds_dst) / pow(2, 32)) * pow(2, 32))
EVAL-clock_offset_s = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, ((ph_rec - ph_org) + (ph_xmt - pbds_dst)) / 2, null())
EVAL-clock_offset_ms = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, ((ph_rec - ph_org) + (ph_xmt - pbds_dst)) * 500, null())
EVAL-roundtrip_delay_s = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, (pbds_dst - ph_org) - (ph_xmt - ph_rec), null())
EVAL-roundtrip_delay_ms = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, ((pbds_dst - ph_org) - (ph_xmt - ph_rec)) * 1000, null())
EVAL-root_delay_ms = root_delay_s * 1000
EVAL-root_dispersion_ms = root_dispersion_s * 1000
EVAL-poll_s = pow(2, poll_exponent)
EVAL-precision_micros = exact(pow(2, precision_exponent) * 1000000)
EVAL-ref_id = trim(ref_id, ".")
LOOKUP-ref_id = iana_ntp_refid_codes ref_id OUTPUT clock_source
LOOKUP-leap_warning = ntp_leap_warning leap_warning OUTPUT leap_warning_text
LOOKUP-mode = ntp_modes mode OUTPUT mode_text
LOOKUP-stratum = ntp_strata stratum OUTPUT stratum_text

### cryptostats ###

[ntp:cryptostats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_crypto = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<src_ip>\S+)\s(?<message>.*)$

### loopstats ###

[ntp:loopstats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_loop = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<clock_offset_s>\S+)\s(?<frequency_offset_ppm>\S+)\s(?<jitter_s>\S+)\s(?<wander_ppm>\S+)\s(?<loop_time_exponent>\S+)
EVAL-loop_time = pow(2, loop_time_exponent)
EVAL-clock_offset_ms = clock_offset_s * 1000
EVAL-jitter_ms = jitter_s * 1000

### peerstats ###

[ntp:peerstats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_peer = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<src_ip>\S+)\s(?<status_word>\S+)\s(?<clock_offset_s>\S+)\s(?<roundtrip_delay_s>\S+)\s(?<dispersion_s>\S+)\s(?<jitter_s>\S+)
EVAL-peer_status_word = status_word
EVAL-status_count = floor(tonumber(status_word, 16) / pow(2, 4)) % 16
EVAL-clock_offset_ms = clock_offset_s * 1000
EVAL-dispersion_ms = dispersion_s * 1000
EVAL-jitter_ms = jitter_s * 1000
EVAL-roundtrip_delay_ms = roundtrip_delay_s * 1000
EVAL-flags = mvappend( \
  if(floor(tonumber(status_word, 16) / pow(2, 15)) % 2 == 0, null(), "config"), \
  if(floor(tonumber(status_word, 16) / pow(2, 14)) % 2 == 0, null(), "authenb"), \
  if(floor(tonumber(status_word, 16) / pow(2, 13)) % 2 == 0, null(), "auth"), \
  if(floor(tonumber(status_word, 16) / pow(2, 12)) % 2 == 0, null(), "reach"), \
  if(floor(tonumber(status_word, 16) / pow(2, 11)) % 2 == 0, null(), "bcst"), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 0, "sel_reject", null()), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 1, "sel_falsetick", null()), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 2, "sel_excess", null()), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 3, "sel_outlier", null()), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 4, "sel_candidate", null()), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 5, "sel_backup", null()), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 6, "sel_sys.peer", null()), \
  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 7, "sel_pps.peer", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 1, "mobilize", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 2, "demobilize", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 3, "unreachable", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 4, "reachable", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 5, "restart", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 6, "no_reply", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 7, "rate_exceeded", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 8, "access_denied", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 9, "leap_armed", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 10, "sys_peer", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 11, "clock_event", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 12, "bad_auth", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 13, "popcorn", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 14, "interleave_mode", null()), \
  if(floor(tonumber(status_word, 16)) % 16 == 15, "interleave_error", null()) \
)

### protostats ###

[ntp:protostats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_proto = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<src>\S+)\s(?<status_word>\S+)\s(?<message_code>\S+)\s(?<message>.*)$
EVAL-status_count = floor(tonumber(status_word, 16) / pow(2, 4)) % 16
EVAL-src_ip = if(match(src, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), src, null())
EVAL-system_status_word = if(src = "0.0.0.0", status_word, null())
EVAL-peer_status_word = if(src = "0.0.0.0", null(), status_word)
EVAL-flags = if(isnotnull(status_word), \
  case( \
    src != "0.0.0.0", \
	  mvappend( \
		  if(floor(tonumber(status_word, 16) / pow(2, 15)) % 2 == 0, null(), "config"), \
		  if(floor(tonumber(status_word, 16) / pow(2, 14)) % 2 == 0, null(), "auth"), \
		  if(floor(tonumber(status_word, 16) / pow(2, 13)) % 2 == 0, null(), "authenb"), \
		  if(floor(tonumber(status_word, 16) / pow(2, 12)) % 2 == 0, null(), "reach"), \
		  if(floor(tonumber(status_word, 16) / pow(2, 11)) % 2 == 0, null(), "bcst"), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 0, "sel_reject", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 1, "sel_falsetick", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 2, "sel_excess", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 3, "sel_outlier", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 4, "sel_candidate", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 5, "sel_backup", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 6, "sel_sys.peer", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 8 == 7, "sel_pps.peer", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 1, "mobilize", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 2, "demobilize", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 3, "unreachable", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 4, "reachable", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 5, "restart", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 6, "no_reply", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 7, "rate_exceeded", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 8, "access_denied", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 9, "leap_armed", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 10, "sys_peer", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 11, "clock_event", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 12, "bad_auth", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 13, "popcorn", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 14, "interleave_mode", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 15, "interleave_error", null()) \
		), \
		src = "0.0.0.0", \
	  mvappend( \
		  if(floor(tonumber(status_word, 16) / pow(2, 14)) == 0, "leap_none", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 14)) == 1, "leap_add_s", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 14)) == 2, "leap_del_s", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 14)) == 3, "leap_alarm", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 0, "sync_unspec", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 1, "sync_pps", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 2, "sync_lf_info", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 3, "sync_hf_info", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 4, "sync_uhf_info", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 5, "sync_local", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 6, "sync_ntp", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 7, "sync_other", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 8, "sync_wristwatch", null()), \
		  if(floor(tonumber(status_word, 16) / pow(2, 8)) % 64 == 9, "sync_telephone", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 0, "unspecified", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 1, "freq_not_set", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 2, "freq_set", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 3, "spike_detect", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 4, "freq_mode", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 5, "clock_sync", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 6, "restart", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 7, "panic_stop", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 8, "no_system_peer", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 9, "leap_armed", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 10, "leap_disarmed", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 11, "leap_event", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 12, "clock_step", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 13, "kern", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 14, "TAI", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 15, "stale_leapsecond_values", null()), \
		  if(floor(tonumber(status_word, 16)) % 16 == 16, "clockhop", null()) \
		) \
	), \
	null() \
)

### rawstats ###

[ntp:rawstats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_raw = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<src_ip>\S+)\s(?<dest_ip>\S+)\s(?<ph_org>\S+)\s(?<ph_rec>\S+)\s(?<ph_xmt>\S+)\s(?<pbds_dst>\S+)\s(?<leap_warning>\S+)\s(?<version>\S+)\s(?<mode>\S+)\s(?<stratum>\S+)\s(?<poll_exponent>\S+)\s(?<precision_exponent>\S+)\s(?<root_delay_s>\S+)\s(?<root_dispersion_s>\S+)\s(?<ref_id>.+)$
EVAL-poll_s = pow(2, poll_exponent)
EVAL-precision_micros = exact(pow(2, precision_exponent) * 1000000)
EVAL-time_origin = if(ph_org == 0, null(), ph_org - 2208988800 - floor((ph_org) / pow(2, 32)) * pow(2, 32))
EVAL-time_receive = if(ph_rec == 0, null(), ph_rec - 2208988800 - floor((ph_rec) / pow(2, 32)) * pow(2, 32))
EVAL-time_transmit = ph_xmt - 2208988800 - floor((ph_xmt) / pow(2, 32)) * pow(2, 32)
EVAL-time_destination = if(pbds_dst == 0, null(), pbds_dst - 2208988800 - floor((pbds_dst) / pow(2, 32)) * pow(2, 32))
EVAL-clock_offset = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, ((ph_rec - ph_org) + (ph_xmt - pbds_dst)) / 2, null())
EVAL-clock_offset_ms = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, ((ph_rec - ph_org) + (ph_xmt - pbds_dst)) * 500, null())
EVAL-roundtrip_delay_s = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, (pbds_dst - ph_org) - (ph_xmt - ph_rec), null())
EVAL-roundtrip_delay_ms = if(ph_org > 0 AND ph_xmt > 0 AND pbds_dst > 0, ((pbds_dst - ph_org) - (ph_xmt - ph_rec)) * 1000, null())
EVAL-root_delay_ms = root_delay_s * 1000
EVAL-root_dispersion_ms = root_dispersion_s * 1000
EVAL-prc_roundtrip_delay_ms = prc_roundtrip_delay_s * 1000
EVAL-prc_dispersion_ms = prc_dispersion_s * 1000
EVAL-ref_id = trim(ref_id, ".")
LOOKUP-ref_id = iana_ntp_refid_codes ref_id OUTPUT clock_source
LOOKUP-leap_warning = ntp_leap_warning leap_warning OUTPUT leap_warning_text
LOOKUP-mode = ntp_modes mode OUTPUT mode_text
LOOKUP-stratum = ntp_strata stratum OUTPUT stratum_text


### sysstats ###

[ntp:sysstats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_sys = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<last_reset_s>\S+)\s(?<packets>\S+)\s(?<packets_generated>\S+)\s(?<current_version>\S+)\s(?<old_version>\S+)\s(?<access_denied>\S+)\s(?<bad_length_or_format>\S+)\s(?<bad_auth>\S+)\s(?<declined>\S+)\s(?<rate_exceeded>\S+)\s(?<kod_packets_out>\S+)

### timingstats ###

[ntp:timingstats]
DATETIME_CONFIG = CURRENT
SHOULD_LINEMERGE = false
TRANSFORMS-ntp_ts = ntp_timestamp
EXTRACT-ntp_timing = ^(\d+\s+[\d\.]+|\d\d\d\d\-\d\d\-\d\dT\d\d:\d\d:\d\d\.\d\d\dZ)\s(?<src_ip>\S+)\s(?<event_count>\S+)\s(?<time_s>\S+)\s(?<message>.+)$
EVAL-time_ms = time_s * 1000
EVAL-time_micros = time_s * 1000000
